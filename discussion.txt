Discussion
----------

1. Which would be the most efficient data structure for a data set with the
   following requirements:

  - frequently removing and adding items to the beginning of the data structure

  - frequently removing and adding items to the end of the data structure

  - rarely indexing and searching

  A. A Python list B. Singly linked list C. Doubly linked list

  Explain your answer.

  Doubly linked list.

  The two links help us to traverse the list in both backward and forward direction.
  Storing the extra link requires some extra space, however, it is the most efficient
  data structure for removing/adding items to both the beginning and the end of the list
  because the first node of the list has its previous link pointing to NULL (similarly,
  the last node of the list points to NULL next), this way it is very easy to add and
  remove items from the beginning and end of the list by redirecting the reference of the
  first and last node to the new items.


2. Which would be the most efficient data structure for a data set with the
   following requirements:

  - order is unimportant

  - frequently adding and removing items

  - frequently looking up items

  A. A Python list  B. A Dictionary  C. Deque  D. Binary Search Tree

  Explain your answer.

  Dictionary

  Since dictionaries map keys to values, it is very efficient for looking up items,
  or adding and removing them â€“ these can be done in constant time. Since order is
  unimportant, we can use dictionaries, because the key-value pairs do not have an order.


3. Explain why looking up, adding elements, and removing elements from a
   dictionary or hash map are all O(1) operations.

   Dictionaries and hash maps can look up and add/remove elements in constant time because
   the data structures are built upon an associative array, as a collection of key-value pairs.
   This means the position is unique and therefore results in a fast lookup time.
   Python dictionaries can hash the a value and can immediately go to its key to check if
   it exists there in constant time (indexing). Similarly, you can add and remove items
   quickly because the items position is not dependent on the other items in the dictionary.


4. Explain why removing elements from or adding elements to an arbitrary
   location in a Python list are O(n) operations.

   Removing or adding to a Python list happens in linear time because lists are ordered
   and contiguous in memory. When an item is removed or added to a list, every other item
   must change positions by one, up or down the list.


5. What is the correct runtime for:

  - Bubble Sort?

  - Quicksort?

  - Merge Sort?

  - Insertion Sort?


6. What is the difference between a tree and a graph?





7. Using the Python implementation of Quicksort from the instructions:

  Given the list [8, 4, 1, 6, 5, 2, 7, 3]:
  When this function is initially called, what are the values of:

    - lst -

    - pivot -

    - lo -

    - hi -



  When the quicksort is first called recursively on the `lo` list, what are the
  values of:

  - lst -

  - pivot -

  - lo -

  - hi -
